=begin
#Topological Inventory Ingress API

#Topological Inventory Ingress API

The version of the OpenAPI document: 0.0.2
Contact: support@redhat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.1

=end

require 'date'

module TopologicalInventoryIngressApiClient
  class VolumeAllOf
    attr_accessor :archived_at

    attr_accessor :extra

    attr_accessor :name

    attr_accessor :orchestration_stack

    attr_accessor :resource_timestamp

    attr_accessor :size

    attr_accessor :source_created_at

    attr_accessor :source_deleted_at

    attr_accessor :source_ref

    attr_accessor :source_region

    attr_accessor :state

    attr_accessor :subscription

    attr_accessor :volume_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'archived_at' => :'archived_at',
        :'extra' => :'extra',
        :'name' => :'name',
        :'orchestration_stack' => :'orchestration_stack',
        :'resource_timestamp' => :'resource_timestamp',
        :'size' => :'size',
        :'source_created_at' => :'source_created_at',
        :'source_deleted_at' => :'source_deleted_at',
        :'source_ref' => :'source_ref',
        :'source_region' => :'source_region',
        :'state' => :'state',
        :'subscription' => :'subscription',
        :'volume_type' => :'volume_type'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'archived_at' => :'DateTime',
        :'extra' => :'Object',
        :'name' => :'String',
        :'orchestration_stack' => :'OrchestrationStackReference',
        :'resource_timestamp' => :'DateTime',
        :'size' => :'Integer',
        :'source_created_at' => :'DateTime',
        :'source_deleted_at' => :'DateTime',
        :'source_ref' => :'String',
        :'source_region' => :'SourceRegionReference',
        :'state' => :'String',
        :'subscription' => :'SubscriptionReference',
        :'volume_type' => :'VolumeTypeReference'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'archived_at',
        :'extra',
        :'name',
        :'orchestration_stack',
        :'resource_timestamp',
        :'size',
        :'source_created_at',
        :'source_deleted_at',
        :'source_region',
        :'state',
        :'subscription',
        :'volume_type'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TopologicalInventoryIngressApiClient::VolumeAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TopologicalInventoryIngressApiClient::VolumeAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'archived_at')
        self.archived_at = attributes[:'archived_at']
      end

      if attributes.key?(:'extra')
        self.extra = attributes[:'extra']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'orchestration_stack')
        self.orchestration_stack = attributes[:'orchestration_stack']
      end

      if attributes.key?(:'resource_timestamp')
        self.resource_timestamp = attributes[:'resource_timestamp']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'source_created_at')
        self.source_created_at = attributes[:'source_created_at']
      end

      if attributes.key?(:'source_deleted_at')
        self.source_deleted_at = attributes[:'source_deleted_at']
      end

      if attributes.key?(:'source_ref')
        self.source_ref = attributes[:'source_ref']
      end

      if attributes.key?(:'source_region')
        self.source_region = attributes[:'source_region']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'subscription')
        self.subscription = attributes[:'subscription']
      end

      if attributes.key?(:'volume_type')
        self.volume_type = attributes[:'volume_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @source_ref.nil?
        invalid_properties.push('invalid value for "source_ref", source_ref cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @source_ref.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          archived_at == o.archived_at &&
          extra == o.extra &&
          name == o.name &&
          orchestration_stack == o.orchestration_stack &&
          resource_timestamp == o.resource_timestamp &&
          size == o.size &&
          source_created_at == o.source_created_at &&
          source_deleted_at == o.source_deleted_at &&
          source_ref == o.source_ref &&
          source_region == o.source_region &&
          state == o.state &&
          subscription == o.subscription &&
          volume_type == o.volume_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [archived_at, extra, name, orchestration_stack, resource_timestamp, size, source_created_at, source_deleted_at, source_ref, source_region, state, subscription, volume_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TopologicalInventoryIngressApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
